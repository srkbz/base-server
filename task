#!/usr/bin/env bash

commands=(install build build-all publish remote-install provision download-quickjs-release download-ttyd-release)

function install {
    pkgName="${1:-""}"
    check-package-exists "$pkgName"

    build "${pkgName}"
    sudo apt install -y "./out/srkbz-${pkgName}.deb"
}

function build {
    pkgName="${1:-""}"
    check-package-exists "$pkgName"

    mkdir -p ./out
    rm -f "./out/srkbz-${pkgName}.deb"
    dpkg-deb --build "./pkgs/${pkgName}" "./out/srkbz-${pkgName}.deb"
    version=$(dpkg-deb -f "./out/srkbz-${pkgName}.deb" Version)
    mv "./out/srkbz-${pkgName}.deb" "./out/srkbz-${pkgName}_${version}.deb"
}

function build-all {
    ls "./pkgs" | while IFS=$'\n' read -r pkg; do
		build "$pkg"
	done
}

function remote-install {
    target="$1"
    packages=("${@:2}")

    homeDir=$(ssh "${target}" 'printf "%s" $HOME')
    ssh "${target}" "mkdir -p ${homeDir}/.srkbz-infra-drop"

    for package in "${packages[@]}"; do
        build "${package}"
        scp "./out/srkbz-${package}"*.deb "${target}:${homeDir}/.srkbz-infra-drop/"
        ssh "${target}" "apt-get install -y \"${homeDir}/.srkbz-infra-drop/srkbz-${package}\"*.deb"
    done
}

function publish {
    target="$1"
    packages=("${@:2}")

    for package in "${packages[@]}"; do
        build "${package}"
        scp "./out/srkbz-${package}"*.deb "${target}:/var/srkbz/apt/public/packages/"
    done

    ssh "${target}" "srkbz-apt-refresh"
}

function provision {
    target="$1"
    package="$2"

	ssh "$target" 'wget -O "repo.deb" https://apt.srk.bz/packages/srkbz-repo_0.1.0.deb && apt-get install ./repo.deb'
	ssh "$target" 'apt-get update && apt-get --with-new-pkgs -y upgrade'
	ssh "$target" "apt-get install -y ${package}"
}

function check-package-exists {
    pkgName="$1"
    if [ "$pkgName" = "" ]; then
        printf "%s\n" "Package name is missing"
        exit 1
    fi

    if [ ! -d "./pkgs/${pkgName}" ]; then
        printf "%s\n" "Package '${pkgName}' does not exist."
        exit 1
    fi
}

function download-quickjs-release {
	quickjsVersion="2020-11-08"
	mkdir -p "./pkgs/quickjs/usr/bin"
	rm -rf "./pkgs/quickjs/usr/bin/*"
	mkdir -p "./temp"
	wget -O "./temp/quickjs.zip" "https://bellard.org/quickjs/binary_releases/quickjs-linux-x86_64-${quickjsVersion}.zip"
	(
		cd "temp"
		unzip "quickjs.zip"
		cp "qjs" "../pkgs/quickjs/usr/bin/qjs"
	)
	rm -rf "./temp"
}

function download-ttyd-release {
	ttydVersion="$(get-pkg-version ttyd)"
	printf "%s\n" "Downloading ttyd ${ttydVersion}"
	mkdir -p "./pkgs/ttyd/usr/bin"
	rm -rf "./pkgs/ttyd/usr/bin/*"
	wget -O "./pkgs/ttyd/usr/bin/ttyd" "https://github.com/tsl0922/ttyd/releases/download/${ttydVersion}/ttyd.x86_64"
	chmod +x "./pkgs/ttyd/usr/bin/ttyd"
}





function get-pkg-version {
	cat "./pkgs/${1}/DEBIAN/control" | grep "Version" | cut -d" " -f2
}

function help {
    printf "%s\n" "Available commands:"
    printf " %s\n" "${commands[@]}" help
}

function run-command {
    command="$1"
    args=("${@:2}")
    for c in "${commands[@]}"; do
        if [ "$c" = "$command" ]; then
            ("$command" "${args[@]}")
            return
        fi
    done
    printf "%s\n" "Command '${command}' does not exist."
}

set -euo pipefail
cd "$(dirname "${BASH_SOURCE[0]}")"
[ -z "${1:-""}" ] || [ "${1:-""}" = "help" ] && help && exit 0
run-command "${1}" "${@:2}"
